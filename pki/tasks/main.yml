---
# author: semio
#
- name: create etcd ssl directory
  file:
    path: "{{etcd_pki_path}}"
    state: directory

- name: create ca configure
  shell: echo '{"signing":{"default":{"expiry":"87600h"},"profiles":{"kubernetes":{"usages":["signing","key encipherment","server auth","client auth"],"expiry":"87600h"}}}}' > ca-config.json
  args:
    chdir: "{{etcd_pki_path}}"

- name: create etcd ca file
  shell: |
    echo '{"CN":"etcd","key":{"algo":"rsa","size":2048},"names":[{"C":"CN","ST":"Shanghai","L":"Shanghai","O":"etcd","OU":"Etcd Security"}]}' > etcd-ca-csr.json
    cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca
  args:
    chdir: "{{etcd_pki_path}}"

- name: create etcd certificates
  shell: |
    echo '{"CN":"etcd","hosts": {{ etcd_hosts | to_json }},"key":{"algo":"rsa","size":2048},"names":[{"C":"CN","ST":"Shanghai","L":"Shanghai","O":"etcd","OU":"Etcd Security"}]}' > etcd-csr.json
    cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd
  args:
    chdir: "{{etcd_pki_path}}"

- name: copy ssl file from remote to local
  fetch:
    src: "{{etcd_pki_path}}/{{item}}"
    dest: "{{local_etcd_pki_path}}"
  loop: "{{etcd_pki_file}}"

- name: create kubernetes ssl directory
  file:
    path: "{{kubernetes_pki_path}}"
    state: directory

- name: create kubernetes ca file
  shell: |
    echo '{"signing":{"default":{"expiry":"87600h"},"profiles":{"kubernetes":{"usages":["signing","key encipherment","server auth","client auth"],"expiry":"87600h"}}}}' > ca-config.json
    echo '{"CN":"kubernetes","key":{"algo":"rsa","size":2048},"names":[{"C":"CN","ST":"Shanghai","L":"Shanghai","O":"Kubernetes","OU":"Kubernetes System"}]}' > ca-csr.json
    cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create api server certificate
  shell: |
    echo '{"CN":"kube-apiserver","hosts": {{ kuber_hosts | to_json }},"key":{"algo":"rsa","size":2048},"names":[{"C":"CN","ST":"Shanghai","L":"Shanghai","O":"Kubernetes","OU":"Kubernetes System"}]}' > apiserver-csr.json
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes apiserver-csr.json | cfssljson -bare apiserver
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create front proxy certificate
  shell: |
    echo '{"CN":"kubernetes","key":{"algo":"rsa","size":2048}}' > front-proxy-ca-csr.json
    cfssl gencert -initca front-proxy-ca-csr.json | cfssljson -bare front-proxy-ca
    echo '{"CN":"front-proxy-client","key":{"algo":"rsa","size":2048}}' > front-proxy-client-csr.json
    cfssl gencert -ca=front-proxy-ca.pem -ca-key=front-proxy-ca-key.pem -config=ca-config.json -profile=kubernetes front-proxy-client-csr.json | cfssljson -bare front-proxy-client
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: cteate controller manager certificate
  shell: |
    echo '{"CN":"system:kube-controller-manager","key":{"algo":"rsa","size":2048},"names":[{"C":"CN","ST":"Shanghai","L":"Shanghai","O":"syroller-manager","OU":"Kubernetes System"}]}' > manager-csr.json
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes manager-csr.json | cfssljson -bare controller-manager
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create scheduler certificate
  shell: |
    echo '{"CN":"system:kube-scheduler","key":{"algo":"rsa","size":2048},"names":[{"C":"CN","ST":"Shanghai","L":"Shanghai","O":"system:kube-scheduler","OU":"Kubernetes System"}]}' > scheduler-csr.json
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes scheduler-csr.json | cfssljson -bare scheduler
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create admin certificate
  shell: |
    echo '{"CN":"admin","key":{"algo":"rsa","size":2048},"names":[{"C":"CN","ST":"Shanghai","L":"Shanghai","O":"system:masters","OU":"Kubernetes System"}]}' > admin-csr.json
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create master kubelet certificate
  shell: |
    echo '{"CN":"system:node:$NODE","key":{"algo":"rsa","size":2048},"names":[{"C":"CN","L":"Shanghai","ST":"Shanghai","O":"system:nodes","OU":"Kubernetes System"}]}' > kubelet-csr.json
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: make every master node's certificate
  shell: |
    NODE="{{item}}"
    cp kubelet-csr.json kubelet-$NODE-csr.json
    sed -i "s/\$NODE/$NODE/g" kubelet-$NODE-csr.json
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=$NODE -profile=kubernetes kubelet-$NODE-csr.json | cfssljson -bare kubelet-$NODE
  loop: "{{kuber_master_nodes}}"
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create admin kubeconfig
  shell: | 
    kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server="{{kube_apiserver}}" --kubeconfig=../admin.kubeconfig
    kubectl config set-credentials kubernetes-admin --client-certificate=admin.pem --client-key=admin-key.pem --embed-certs=true --kubeconfig=../admin.kubeconfig
    kubectl config set-context kubernetes-admin@kubernetes --cluster=kubernetes --user=kubernetes-admin --kubeconfig=../admin.kubeconfig
    kubectl config use-context kubernetes-admin@kubernetes --kubeconfig=../admin.kubeconfig
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create controller-manager kubeconfig
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server="{{kube_apiserver}}" --kubeconfig=../controller-manager.kubeconfig
    kubectl config set-credentials system:kube-controller-manager --client-certificate=controller-manager.pem --client-key=controller-manager-key.pem --embed-certs=true --kubeconfig=../controller-manager.kubeconfig
    kubectl config set-context system:kube-controller-manager@kubernetes --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=../controller-manager.kubeconfig
    kubectl config use-context system:kube-controller-manager@kubernetes --kubeconfig=../controller-manager.kubeconfig
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create scheduler kubeconfig
  shell: |
    kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server="{{kube_apiserver}}" --kubeconfig=../scheduler.kubeconfig
    kubectl config set-credentials system:kube-scheduler --client-certificate=scheduler.pem --client-key=scheduler-key.pem --embed-certs=true --kubeconfig=../scheduler.kubeconfig
    kubectl config set-context system:kube-scheduler@kubernetes --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=../scheduler.kubeconfig
    kubectl config use-context system:kube-scheduler@kubernetes --kubeconfig=../scheduler.kubeconfig
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create kubelet kubeconfig
  shell: |
    source /etc/profile
    kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server="{{kube_apiserver}}" --kubeconfig=../kubelet.kubeconfig
    kubectl config set-credentials system:node:"{{ip}}" --client-certificate=kubelet-"{{ip}}".pem --client-key=kubelet-"{{ip}}"-key.pem --embed-certs=true --kubeconfig=../kubelet.kubeconfig
    kubectl config set-context system:node:"{{ip}}"@kubernetes --cluster=kubernetes --user=system:node:"{{ip}}" --kubeconfig=../kubelet.kubeconfig
    kubectl config use-context system:node:"{{ip}}"@kubernetes --kubeconfig=../kubelet.kubeconfig
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: create service account key
  shell: |
    openssl genrsa -out sa.key 2048
    openssl rsa -in sa.key -pubout -out sa.pub
  args:
    chdir: "{{kubernetes_pki_path}}"

- name: copy secret file
  copy:
    src: encryption.yaml
    dest: /etc/kubernetes/encryption.yaml

- name: copy apiserver rbac policy file
  copy:
    src: audit-policy.yaml
    dest: /etc/kubernetes/audit-policy.yaml

- name: fetch kube pki file
  fetch:
    src: "{{kubernetes_pki_path}}/{{item}}"
    dest: "{{local_kubernetes_pki_path}}"
  loop: "{{kube_pki_file}}"

- name: fetch kube config file
  fetch:
    src: "{{kubernetes_path}}/{{item}}"
    dest: "{{local_kubernetes_path}}"
  loop: "{{kube_config}}"
